// -*- c++ -*-
// AUTOGENERATED SOURCE FROM cmdtab.jj.cpp
#include "rsyncxx/{{ prefix }}.tab.hpp"
#include "rsyncxx/cmd.hpp"

namespace rsync {
    static const cmd_spec_t {{ prefix }}_cmd_specs[] = {
        {% for cmd in cmds %}
        { {{ cmd.kind }}, {{ cmd.immed }}, {{ cmd.param1 }}, {{ cmd.param2 }} }, /* {{ cmd.value }}/{{ cmd.hexvalue }} */{% endfor %}
    };
    static const char *{{ prefix }}_graph[] = {
        {% for gstr in graphstrs %}
        "{{ gstr }}", {% endfor %}
    };
    const cmd_suite_t {{ prefix }}_suite = {
        {{ maxcmd }}, {{ maxcmdlen }}, {{ entrance }}, {{ prefix }}_cmd_specs, {{ prefix }}_graph
    };

    {% for pkind in pkinds0 %}
    const uint8_t {{ prefix }}_cmd_{{ pkind.name }} = {{ pkind.cmd }}; {% endfor %}
    {% for pkind in pkinds1 %}
    uint8_t *
    {{ prefix }}_make_{{ pkind.name }}(uint8_t *cur, uint64_t param1)
    {
        if (param1 < {{ pkind.start1 }} - {{ pkind.start0 }}) {
            *cur++ = {{ pkind.start0 }} + (uint8_t)param1;
        } else {
            uint8_t paramtype = getparamtype(param1);
            *cur++ = {{ pkind.start1 }} + paramtype;
            cur = make_param(cur, param1, paramtype);
        }
        return cur;
    }
    {% endfor %}
    {% for pkind in pkinds2 %}
    uint8_t *
    {{ prefix }}_make_{{ pkind.name }}(uint8_t *cur, uint64_t param1, uint64_t param2)
    {
        uint8_t paramtype1 = getparamtype(param1);
        uint8_t paramtype2 = getparamtype(param2);
        *cur++ = {{ pkind.start1 }} + (paramtype1 << 2) + paramtype2;
        cur = make_param(cur, param1, paramtype1);
        cur = make_param(cur, param2, paramtype2);
        return cur;
    }
    {% endfor %}
}
